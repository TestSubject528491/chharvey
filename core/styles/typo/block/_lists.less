// main: ../../core.less

/*###############*\
    _lists.less
\*###############*/


/**
  * The left indent of a `.List` Object (or similar Object).
  * The indent should be 0.5in (48px), the standard indent for APA style.
  * Use this value on `padding-left` or `margin-left`, whichever is more appropriate.
  * Use operations on `@listindent`, such as `(@listindent / 2)` for variants.
  */
@listindent: 0.5in;
/**
  * This Interface is used on block lists. It may be a literal `ol` or `ul` Element containing
  * `li` Elements, or it may be the abstract notion of a list of other block Objects. The order of
  * list items may be releveant or irrelevant.
@implements
: .vru-content()
: .follows-heading()
@tags
: #typography
: #list
@author
: Chris Harvey
@updated
: 2014-10-19
  */
// .list-block() {
//   display: block;
//   .vru-content();
//   .follows-heading(1);
// }
/**
  * This Object represents a block item in a list. It may be a literal `li` Element
  * inside an `ol` or `ul` Element, or it may be any Element in any "List" class.
@implements
: .vru-content
@tags
: #typography
: #list
@author
: Chris Harvey
@updated
: 2014-10-11
  */
// .Item {
// }
/**
  * This Object represents an ordered list, or a list used for an outline. This does *not*
  * correspond directly to a literal `ol` Element; this Object is simply to be displayed with
  * block list items, with markers that indicate order. This class does *not* indicate that the
  * list is semantically ordered. Typical uses include table of contents, etc. Outlines are by
  * definition, ordered.
@implements
: .list-block()
@tags
: #typography
: #list
: #ordered
@author
: Chris Harvey
@updated
: 2014-05-11
  */
ol {
  // .list-block();
  // padding-left: @listindent;
  // list-style-type: decimal-leading-zero; //  01.  02.  03.
  // list-style-type: decimal;              //   1.   2.   3.
}
/**
  * These Objects represent outlined lists with different enumeration types.
@tags
: #typography
: #list
: #ordered
@author
: Chris Harvey
@updated
: 2014-05-03
  */
ol.Ome {list-style-type: decimal-leading-zero;} //  01.  02.  03.
ol.Alp {list-style-type: upper-roman;}          //   I.  II. III.
ol.Bet {list-style-type: upper-alpha;}          //   A.   B.   C.
ol.Gam {list-style-type: decimal;}              //   1.   2.   3.
ol.Del {list-style-type: lower-alpha;}          //   a.   b.   c.
ol.Eps {list-style-type: lower-roman;}          //   i.  ii. iii.
ol.Zet {list-style-type: lower-greek;}          //   α.   β.   γ.
/**
  * This Object represents an outlined list. It is used for nested `ol` objects, for example,
  * to display a table of contents or document outline.
@implements
: .vru-top()
@tags
: #typography
: #list
@author
: Chris Harvey
@updated
: 2014-12-19
*/
ol.Outline {
  padding-left: 2rem;
  .Outline {
    .vru-bottom(0);
  }
}
/**
  * This Object represents a generic list whose items are to be displayed as blocks with the same
  * markers. It does *not* necessarily correspond directly to a literal `ul` Element. This class
  * does *not* indicate that the list is semantically unordered.
@implements
: .list-block()
@tags
: #typography
: #list
: #unordered
@author
: Chris Harvey
@updated
: 2014-05-11
  */
ul {
  // .list-block();
  // padding-left: @listindent;
  list-style-type: square;
}
/**
  * This Object represents an action list, which typically contains hyperlinks.
  * Line items are made to look like hyperlinks, even if they are not. Each line item must have
  * the class `.Item` for elements that aren’t `ul` or `ol`.
@implements
: .list-block()
: .Link
@tags
: #typography
: #list
: #link
@author
: Chris Harvey
@updated
: 2014-10-22
  */
.Alist {
  // .list-block();
  padding-left: 0;
  list-style-type: none;
  > .Item {
    .Link;
    &::before {content: '\2713\0020';} // check mark, space
  }
}
/**
  * This Object represents a generic inline list. It, along with its items, are displayed inline.
  * It may be used for a listing of items, typically words. The order of items may or
  * may not be relevant (both `ol` and `ul` Elements can instantiate this Class).
  *
  * Authors may wish to contain this Object within a block, such as a Paragraph Object.
  *
  * `.Item.endline` creates a visual appearance of a line break within an inline list.
@extends
: .List
@tags
: #typography
: #list
: #inline
@author
: Chris Harvey
@updated
: 2015-01-05
  */
.Ilist {
  display: inline;
  padding-left: 0;
  > .Item {
    display: inline;
    &.endline::after  {display: block; content: '' !important;}
  }
}
/**
  * These Objects are `.Item`s in a `.Ilist`. They represent character-separated values.
@extends
: .Ilist
@tags
: #typography
: #list
@author
: Chris Harvey
@updated
: 2015-01-05
  */
.Ilist.Comma  { > .Item:not(:last-child)::after {content:          ',\0020';} } // ', '
.Ilist.Mdash  { > .Item:not(:last-child)::after {content: '\0020\2014\0020';} } // ' — '
.Ilist.Ndash  { > .Item:not(:last-child)::after {content: '\0020\2013\0020';} } // ' – '
.Ilist.Bull   { > .Item:not(:last-child)::after {content: '\0020\2022\0020';} } // ' • '
.Ilist.Square { > .Item:not(:last-child)::after {content: '\0020\25aa\0020';} } // ' ▪ '
/**
  * This Object represents a 'List of Prose', a list whose items consist of only paragraphs.
@extends
: .Olist
@implements
: .vru-top()
@tags
: #typography
: #list
@author
: Chris Harvey
@updated
: 2014-10-03
  */
// .Olist.LOP {
//   > .Item:not(:first-child) {
//     .vru-top(1);
//   }
// }
/**
  * This Object represents a 'List in Prose', a list that is contained within prose paragraphs.
  * The list items contain spans of text, but not whole paragraphs. It is displayed inline, and has
  * inline items as well. The items are preceded with counters.
@extends
: .Ilist
@tags
: #typography
: #list
: #inline
@author
: Chris Harvey
@updated
: 2014-05-25
  */
// .Ilist.LIP {
//   counter-reset: count;
//   > .Item {
//     counter-increment: count;
//     &::before {
//       content: '(' counter(count) ') ';
//     }
//   }
// }
