// main: ../../all.less

/*###############*\
    _lists.less
\*###############*/


/**
  * The left indent of a `.List` Object (or similar Object).
  * The indent should be 0.5in, the standard indent for APA style.
  * Use this value on `padding-left` or `margin-left`, whichever is more appropriate.
  * Use operations on `@listindent`, such as `(@listindent / 2)` for variants.
  */
@listindent: 0.5in;
/**
  * This Interface adds a left padding to a `.List` Object. The padding-left is set to 48px, which is
  * equal to 0.5in, the standard indent for APA style.
  * The `.listindent-half` Interface adds half the padding (24px).
@tags
: #typography
: #list
: #indent
: #padding
@author
: Chris Harvey
@updated
: 2014-06-26
  */
// .listindent      {padding-left:  @tab;}
// .listindent-half {padding-left: (@tab / 2);}
/**
  * This Interface is used on block lists. It may be a literal `ol` or `ul` Element containing
  * `li` Elements, or it may be the abstract notion of a list of other block Objects. The order of
  * list items may be releveant or irrelevant.
@implements
: .vru-content
@tags
: #typography
: #list
@author
: Chris Harvey
@updated
: 2014-10-01
  */
.list-block() {
	display: block;
	.vru-content;
}
/**
  * This Object represents a block item in a `.List` Object. It may be a literal `li` Element
  * inside an `ol` or `ul` Element, or it may be any Element in a `.List` Object.
@implements
: .vru-content
@tags
: #typography
: #list
@author
: Chris Harvey
@updated
: 2014-08-06
  */
// .Item {
// 	display: list-item;
// }
/**
  * This Object represents an ordered list, or a list used for an outline. This does *not*
  * correspond directly to a literal `ol` Element; this Object is simply to be displayed with
  * block list items, with markers that indicate order. This class does *not* indicate that the
  * list is semantically ordered. Typical uses include table of contents, etc. Outlines are by
  * definition, ordered.
@implements
: .list-block
@tags
: #typography
: #list
: #ordered
@author
: Chris Harvey
@updated
: 2014-05-11
  */
.Olist {
	.list-block();
	padding-left: @listindent;
	list-style-type: decimal-leading-zero; //  01.  02.  03.
	list-style-type: decimal;              //   1.   2.   3.
}
/**
  * These Objects represent outlined lists with different enumeration types.
@extends
: .Olist
@tags
: #typography
: #list
: #ordered
@author
: Chris Harvey
@updated
: 2014-05-03
  */
.Olist.Ome {list-style-type: decimal-leading-zero;} //  01.  02.  03.
.Olist.Alp {list-style-type: upper-roman;}          //   I.  II. III.
.Olist.Bet {list-style-type: upper-alpha;}          //   A.   B.   C.
.Olist.Gam {list-style-type: decimal;}              //   1.   2.   3.
.Olist.Del {list-style-type: lower-alpha;}          //   a.   b.   c.
.Olist.Eps {list-style-type: lower-roman;}          //   i.  ii. iii.
.Olist.Zet {list-style-type: lower-greek;}          //   α.   β.   γ.
/**
  * This Object represents a generic list whose items are to be displayed as blocks with the same
  * markers. It does *not* necessarily correspond directly to a literal `ul` Element. This class
  * does *not* indicate that the list is semantically unordered.
@implements
: .list-block
@tags
: #typography
: #list
: #unordered
@author
: Chris Harvey
@updated
: 2014-05-11
  */
.Ulist {
	.list-block();
	padding-left: @listindent;
	list-style-type: square;
}
/**
  * This Object represents an action list, which typically contains hyperlinks.
@implements
: .list-block
@tags
: #typography
: #list
: #link
@author
: Chris Harvey
@updated
: 2014-05-11
  */
.Alist {
	.list-block();
	> .Item {
		color: @color_link_up;
		&:hover {color: @color_link_dn;}
		&::before {content: '\2713\0020';} // check mark, space
	}
}

/**
  * This Object represents a generic inline list. It, along with its items, are displayed inline.
  * It may be used for a listing of items, typically words. The order of items may or
  * may not be relevant (both `ol` and `ul` Elements can instantiate this Class).
  *
  * Authors may wish to contain this Object within a block, such as a Paragraph Object.
@extends
: .List
@tags
: #typography
: #list
: #inline
@author
: Chris Harvey
@updated
: 2014-10-01
  */
.Ilist {
	display: inline;
	> .Item {
		display: inline;
	}
}
/**
  * These Objects are `.Item`s in a `.Ilist`. They represent character-separated values.
  * The `.endline` interface creates a visual appearance of a line break.
@extends
: .Ilist
@tags
: #typography
: #list
@author
: Chris Harvey
@updated
: 2014-08-06
  */
.Ilist.Comma > .Item:not(:last-child)::after {content:          ',\0020';} // ', '
.Ilist.Mdash > .Item:not(:last-child)::after {content: '\0020\2014\0020';} // ' — '
.Ilist.Ndash > .Item:not(:last-child)::after {content: '\0020\2013\0020';} // ' – '

.Ilist > .Item.endline::after  {display: block; content: '' !important;}

/**
  * This Object represents a 'List of Prose', a list whose items consist of only paragraphs.
@extends
: .Olist
@implements
: .vru-top()
@tags
: #typography
: #list
@author
: Chris Harvey
@updated
: 2014-10-03
  */
.Olist.LOP {
	> .Item:not(:first-child) {
		.vru-top(1);
	}
}
/**
  * This Object represents a 'List in Prose', a list that is contained within prose paragraphs.
  * The list items contain spans of text, but not whole paragraphs. It is displayed inline, and has
  * inline items as well. The items are preceded with counters.
@extends
: .Ilist
@tags
: #typography
: #list
: #inline
@author
: Chris Harvey
@updated
: 2014-05-25
  */
.Ilist.LIP {
	counter-reset: count;
	> .Item {
		counter-increment: count;
		&::before {
			content: '(' counter(count) ') ';
		}
	}
}
