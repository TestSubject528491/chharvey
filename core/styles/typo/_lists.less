// main: ../all.less

/*---------------*\
    _lists.less
\*---------------*/

// Table of Contents
// - LISTS
// - ENUMS


//++++++//
/*@LISTS*/
//++++++//
/**
  * This Interface adds a left padding to a `.List` Object. The padding-left is set to 48px, which is
  * equal to 0.5in, the standard indent for APA style.
  * The `.listindent-half` Interface adds half the padding (24px).
@tags
: #typography
: #list
: #indent
: #padding
@author
: Chris Harvey
@updated
: 2014-06-26
  */
.listindent {
	padding-left: @tab;
}
.listindent-half {
	padding-left: (@tab / 2);
}
/**
  * This Object represents a block list. It may be a literal `ol` or `ul` Element containing
  * `li` Elements, or it may be the abstract notion of a list of other block Objects. The order of
  * list items may be releveant or irrelevant.
  * This `.List` Object is  displayed as a block Object containing other block Objects. See the
  * `.Enum` Object for a short listing of inline Objects (e.g., a list of keywords).
@implements
: .vru-top-1
@tags
: #typography
: #list
@author
: Chris Harvey
@updated
: 2014-05-03
  */
.List {
	&:extend(.vru-top-1 all);
	display: block;
	list-style-type: none;
	list-style-position: outside;
}
/**
  * This Object represents a block item in a `.List` Object. It may be a literal `li` Element
  * inside an `ol` or `ul` Element, or it may be any Element in a `.List` Object.
@implements
: .vru-content
@tags
: #typography
: #list
@author
: Chris Harvey
@updated
: 2014-05-08
  */
.List > .Item {
	&:extend(.vru-content);
	display: list-item;
}
/**
  * This Object represents a nested List Object nested within a List Item Object.
@implements
: .vru-top-0
: .listindent
@tags
: #typography
: #list
@author
: Chris Harvey
@updated
: 2014-05-10
  */
.List > .Item > .List {
	&:extend(.vru-top-0);
	&:extend(.listindent);
}
/**
  * This Object represents an ordered list, or a list used for an outline. This does *not*
  * correspond directly to a literal `ol` Element; this Object is simply to be displayed with
  * block list items, with markers that indicate order. This class does *not* indicate that the
  * list is semantically ordered. Typical uses include table of contents, etc. Outlines are by
  * definition, ordered.
@extends
: .List
@implements
: .listindent
@tags
: #typography
: #list
: #ordered
@author
: Chris Harvey
@updated
: 2014-05-11
  */
.List.O {
	&:extend(.listindent);
	list-style-type: decimal-leading-zero; //  01.  02.  03.
	list-style-type: decimal;              //   1.   2.   3.
}
/**
  * These Objects represent outlined lists with different enumeration types.
@extends
: .List.O
@tags
: #typography
: #list
: #ordered
@author
: Chris Harvey
@updated
: 2014-05-03
  */
.List.O.Omega   {list-style-type: decimal-leading-zero;} //  01.  02.  03.
.List.O.Alpha   {list-style-type: upper-roman;}          //   I.  II. III.
.List.O.Beta    {list-style-type: upper-alpha;}          //   A.   B.   C.
.List.O.Gamma   {list-style-type: decimal;}              //   1.   2.   3.
.List.O.Delta   {list-style-type: lower-alpha;}          //   a.   b.   c.
.List.O.Epsilon {list-style-type: lower-roman;}          //   i.  ii. iii.
.List.O.Zeta    {list-style-type: lower-greek;}          //   α.   β.   γ.
/**
  * This Object represents a generic list whose items are to be displayed as blocks with the same
  * markers. It does *not* necessarily correspond directly to a literal `ul` Element. This class
  * does *not* indicate that the list is semantically unordered.
@extends
: .List
@implements
: .listindent
@tags
: #typography
: #list
: #unordered
@author
: Chris Harvey
@updated
: 2014-05-11
  */
.List.U {
	&:extend(.listindent);
	list-style-type: square;
}
/**
  * This Object represents a generic list whose items are to be displayed inline. The list itself
  * appears as a block.
@extends
: .List
@tags
: #typography
: #list
: #inline
@author
: Chris Harvey
@updated
: 2014-05-11
  */
.List.I {
	> .Item {
		display: inline;
	}
}
/**
  * This Object represents a list of images, for example, contact icons.
@extends
: .List.I
@tags
: #typography
: #list
@author
: Chris Harvey
@updated
: 2014-06-16
  */
.List.I.Iconlist {
	&:extend(.margin-even);
	width: 400px;
	text-align: center;
}
/**
  * This Object represents an action list, which typically contains hyperlinks.
@extends
: .List
@tags
: #typography
: #list
: #link
@author
: Chris Harvey
@updated
: 2014-05-11
  */
.List.A {
	> .Item {
		color: @color_link_up;
		&:hover {color: @color_link_dn;}
		&::before {content: '\2713\0020';} // check mark, space
	}
}
//++++ @end LISTS ++++//


//++++++//
/*@ENUMS*/
//++++++//
/**
  * This Object represents a inline listing of items, typically words. The order of items may or
  * may not be relevant.
@tags
: #typography
: #list
@author
: Chris Harvey
@updated
: 2014-05-26
  */
.Enum {
	display: inline;
	> .Item {
		&:extend(.vru-content);
		display: inline;
	}
}
/**
  * This Object represents a 'List in Prose', a list that is contained within prose paragraphs.
  * The list items contain spans of text, but not whole paragraphs. It is displayed inline, and has
  * inline items as well. The items are preceded with counters.
@extends
: .Enum
@tags
: #typography
: #list
: #inline
@author
: Chris Harvey
@updated
: 2014-05-25
  */
.Enum.LIP {
	counter-reset: count;
	> .Item {
		counter-increment: count;
		&::before {
			content: '(' counter(count) ') ';
		}
	}
}
//++++ @end ENUMS ++++//

/**
  * These Objects are `.Item`s in a `.List` or `.Enum`. They represent character-separated values.
@tags
: #typography
: #list
@author
: Chris Harvey
@updated
: 2014-06-07
  */
.Item.Comma::after {content:          ',\0020';}
.Item.Mdash::after {content: '\0020\2014\0020';} // ' — '
.Item.Ndash::after {content: '\0020\2013\0020';} // ' – '

/**
  * This Object represents a generic list whose items are to be displayed as blocks that have
  * `float: left;`.
@implements
: .clearfix
@tags
: #typography
: #list
: #float
@author
: Chris Harvey
@updated
: 2014-05-11
  */
//.List.F {
//	&:extend(.clearfix all);
//	> .Item {
//		display: block;
//		float: left;
//	}
//	> .Item.F1o1:extend(#_ .width-f1o1) {}
//	> .Item.F1o2:extend(#_ .width-f1o2) {}
//	> .Item.F1o3:extend(#_ .width-f1o3) {}
//	> .Item.F1o4:extend(#_ .width-f1o4) {}
//	> .Item.F1o5:extend(#_ .width-f1o5) {}
//	> .Item.F1o6:extend(#_ .width-f1o6) {}
//}
