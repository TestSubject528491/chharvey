// main: ../../core.less

/*##############*\
    _code.less
\*##############*/


// default border radius for code-like Objects
@code_brdr_radius: 3px;

// colors for inline code (Solarized Light Theme)
@color_codeinl_bg:   @solarized_base3;
@color_codeinl_brdr: @solarized_base2;
@color_codeinl_comm: @solarized_base1;
@color_codeinl_txt:  @solarized_base00;
@color_codeinl_emph: @solarized_base01;
// colors for block code (Solarized Dark Theme)
@color_codeblk_bg:   @solarized_base03;
@color_codeblk_brdr: @solarized_base02;
@color_codeblk_comm: @solarized_base01;
@color_codeblk_txt:  @solarized_base0;
@color_codeblk_emph: @solarized_base1;

/**
  * An Interface used for both inline and block code. Automate the coloring of code Elements.
  * `.codecolors-sol(lite)` sets a Solarized Light theme
  * `.codecolors-sol(dark)` sets a Solarized Dark theme
  * IMPORTANT:
  * - To denote comments, use the HTML `small` Element. Yes, this means code comments.
  * - To denote importance, use the HTML `strong` Element.
@params
: @color_txt  : the value of the `color` property
: @color_comm : the value of the `color` property for code comments
: @color_emph : the value of the `color` property for code marked important
: @color_bg   : the value of the `background-color` property
: @color_brdr : the value of the `border-color` property
@tags
: #code
: #schematic
: #Solarized
@author
: Chris Harvey
@updated
: 2015-02-19
  */
.codecolors(@color_txt; @color_comm; @color_emph; @color_bg; @color_brdr) {
  border-color: @color_brdr;
  color: @color_txt;
  background-color: @color_bg;
  > small {
    font-size: inherit;
    color: @color_comm;
  }
  > strong {
    color: @color_emph;
  }
}
.codecolors-sol(lite) {.codecolors(@color_codeinl_txt; @color_codeinl_comm; @color_codeinl_emph; @color_codeinl_bg; @color_codeinl_brdr);}
.codecolors-sol(dark) {.codecolors(@color_codeblk_txt; @color_codeblk_comm; @color_codeblk_emph; @color_codeblk_bg; @color_codeblk_brdr);}

/**
  * A span of text that a computer program would recognize.
  * Use class `.c` to force an Element into this style, for example using an inline span of code
  * inside a `pre` Element (because normally `pre > code` are code blocks).
@implements
: .box-inline()
: .codecolors-sol-lite()
@tags
: #code
@author
: Chris Harvey
@updated
: 2015-02-19
  */
code {
  .box-inline(@code_brdr_radius);
  .codecolors-sol(lite);
  font-family: @fontfam_code;
}

/**
  * A block of code. Since its semantics are derived from the formatting
  * (line breaks, indenting, etc) of the text content, it should be wrapped with a `pre` Element.
@implements
: .box-block()
: .font-size-block()
: .codecolors-sol-dark()
@tags
: #code
@author
: Chris Harvey
@updated
: 2015-02-19
  */
.c--Blk {
  .box-block(2px; @code_brdr_radius);
  .font-size-block(@font_size_sml; @line_height_base);
  .codecolors-sol(dark);
  display: block;
  text-align: left;
  white-space: inherit;
  overflow: inherit;
}

/**
  * Sub-Components of code:
  *
  * `.c__Ctl`  : programming control (if, for, switch, return)
  * `.c__Opr`  : delimiter or operator (+, ==, ., new, this)
  * `.c__Kwd`  : predefined keywords (var, function)
  * `.c__Cst`  : a number, color, or character constant
  * `.c__Str`  : any string
  * `.c__Cmd`  : a function name, function call, constructor call, or Less, LaTeX, or JS command
  * `.c__Arg`  : argument to a function or constructor call, or a Less, LaTeX, or JS argument
  * `.c__Obj`  : a class or object reference

  * `.c__Tag`  : an HTML tag
  * `.c__Atr`  : an HTML attribute
  * `.c__Val`  : an HTML or CSS value
  * `.c__Sel`  : a CSS selector
  * `.c__Prp`  : a CSS property
@tags
: #code
@author
: Chris Harvey
@updated
: 2015-02-19
  */
.c__Ctl {color: @solarized_red;}
.c__Opr {color: @solarized_orange;}
.c__Kwd {color: @solarized_yellow;}
.c__Cst {color: @solarized_green;}
.c__Str {color: @solarized_cyan;}
.c__Cmd {color: @solarized_blue;}
.c__Arg {color: @solarized_violet;}
.c__Obj {color: @solarized_magenta;}
.c__Tag {color: @solarized_blue;}
.c__Atr {color: @solarized_yellow;}
.c__Val {color: @solarized_cyan;}
.c__Sel {color: @solarized_blue;}
.c__Prp {color: @solarized_yellow;}

/**
  * This Object represents an individual key (a button) on a keyboard, calculator, or other device.
  *
  * The `kbd` Element represents general user input. The `kbd > kbd` Element represents an actual
  * key, button, or single unit of input.
  *
@implements
: .box-inline()
: .codecolors-sol-dark()
@tags
: #code
@author
: Chris Harvey
@updated
: 2015-02-17
  */
kbd > kbd {
  .box-inline(@code_brdr_radius);
  .codecolors-sol(dark);
  font-size: inherit; // undo compounding font sizes
  font-family: @fontfam_accent;
  color: @color_codeblk_emph;
}

/**
  * This Object represents a path in a directory system (for folders and files).
  * Recommended instantiated by a `code` or `samp` Element.
@tags
: #code
@author
: Chris Harvey
@updated
: 2014-05-25
  */
.c--Path {
  font-style: italic;
}

/**
  * This Object represents a mathematical expression or statement.
  * Its input is the LaTeX syntax.
@author
: Chris Harvey
@updated
: 2014-08-22
  */
.M {
  font-family: @fontfam_math;
  white-space: pre;
  overflow: auto;
}

/**
  * These Objects are subclasses of `.M`.
@author
: Chris Harvey
@updated
: 2014-10-11
  */
.M.B {
  display: block;
  min-height: (3 * @vru_core);
}
