// main: all.less

/*--------------------*\
    _interfaces.less
\*--------------------*/

//Table of Contents
// - MIXINS
// 	- Abstract Boxes
// - INTERFACES
// 	- Delimiters


//+++++++//
/*@MIXINS*/
//+++++++//
/**
  * Use this Mixin to apply a rotation transformation to an Element.
@params
: @rotation : the angle, in degrees, to rotate the element
@tags
: #transformation
: #vendorspecific
@author
: Chris Harvey
@updated
: 2014-05-10
  */
.rotate(@rotation) {
	-webkit-transform: rotate(@rotation);
	   -moz-transform: rotate(@rotation);
	    -ms-transform: rotate(@rotation);
	     -o-transform: rotate(@rotation);
	        transform: rotate(@rotation);
}
/**
  * Use this Mixin to apply a transition timing effect on an Element.
@params
: @props : the CSS property name(s). If more than one, they must be comma-separated
: @dura  : the length in time, in seconds, the transition is to be in effect
: @func  : the timing-function. See `https://developer.mozilla.org/en-US/docs/Web/CSS/timing-function`
: @delay : the length in time, in seconds, the transition will wait before starting
@tags
: #transition
: #vendorspecific
@author
: Chris Harvey
@updated
: 2014-06-17
  */
.transition(@props; @dura; @func; @delay) {
	-webkit-transition-property: @props;
	   -moz-transition-property: @props;
	    -ms-transition-property: @props;
	     -o-transition-property: @props;
	-webkit-transition-duration: @dura;
	   -moz-transition-duration: @dura;
	    -ms-transition-duration: @dura;
	     -o-transition-duration: @dura;
	-webkit-transition-timing-function: @func;
	   -moz-transition-timing-function: @func;
	    -ms-transition-timing-function: @func;
	     -o-transition-timing-function: @func;
	-webkit-transition-delay: @delay;
	   -moz-transition-delay: @delay;
	    -ms-transition-delay: @delay;
	     -o-transition-delay: @delay;
}
.transition(@props; @duration) {
	.transition(@props; @duration; ease; 0s);
}
/**
  * Use this Mixin to apply a linear gradient background on an Element.
  * See [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient) for more info.
  *
  * The number of possibilities for the list of paramaters of the CSS function `linear-gradient()`
  * is so great that it would be inefficient to designate each parameter. Therefore, functions are
  * overloaded to handle up to five paramaters.
@params
: @param1 : the first paramater
: @param2 : the second paramater
: @param3 : the third paramater
: @param4 : the fourth paramater
: @param5 : the fifth paramater
@tags
: #gradient
: #vendorspecific
@author
: Chris Harvey
@updated
: 2014-06-24
  */
.gradient(@param1) {
	background-image: -webkit-linear-gradient(@param1);
	background-image:    -moz-linear-gradient(@param1);
	background-image:      -o-linear-gradient(@param1);
	background-image:         linear-gradient(@param1);
}
.gradient(@param1; @param2) {
	background-image: -webkit-linear-gradient(@param1, @param2);
	background-image:    -moz-linear-gradient(@param1, @param2);
	background-image:      -o-linear-gradient(@param1, @param2);
	background-image:         linear-gradient(@param1, @param2);
}
.gradient(@param1; @param2; @param3) {
	background-image: -webkit-linear-gradient(@param1, @param2, @param3);
	background-image:    -moz-linear-gradient(@param1, @param2, @param3);
	background-image:      -o-linear-gradient(@param1, @param2, @param3);
	background-image:         linear-gradient(@param1, @param2, @param3);
}
.gradient(@param1; @param2; @param3; @param4) {
	background-image: -webkit-linear-gradient(@param1, @param2, @param3, @param4);
	background-image:    -moz-linear-gradient(@param1, @param2, @param3, @param4);
	background-image:      -o-linear-gradient(@param1, @param2, @param3, @param4);
	background-image:         linear-gradient(@param1, @param2, @param3, @param4);
}
.gradient(@param1; @param2; @param3; @param4; @param5) {
	background-image: -webkit-linear-gradient(@param1, @param2, @param3, @param4, @param5);
	background-image:    -moz-linear-gradient(@param1, @param2, @param3, @param4, @param5);
	background-image:      -o-linear-gradient(@param1, @param2, @param3, @param4, @param5);
	background-image:         linear-gradient(@param1, @param2, @param3, @param4, @param5);
}
//---------------//
/*@Abstract Boxes*/
//---------------//
/**
  * This Mixin creates an abstract inline structure, boxed with a border.
@params
: @border_radius : the value of `border-radius` property
@implements
: .cellpaddingdefault
@mixesin
@tags
: #box
: #verticalrhythm
@author
: Chris Harvey
@updated
: 2014-05-25
  */
.box-inline(@border_radius) {
	display: inline;
	padding: 1px 2px; // why these numbers?
	border-width: 1px;
	border-style: solid;
	border-radius: @border_radius;
	white-space: nowrap;
}
/**
  * This Mixin creates an abstract block structure, boxed with a border.
@params
: @border_radius : the value of `border-radius` property
@implements
: .cellpaddingdefault
: .vru-content
@mixesin
: .border-vert-both()
@tags
: #box
: #verticalrhythm
@author
: Chris Harvey
@updated
: 2014-05-25
  */
.box-block(@border_radius) {
	&:extend(.cellpaddingdefault);
	&:extend(.vru-content);
	.border-vert-both(all; 1px; solid);
	border-radius: @border_radius;
}
//---- @end Abstract Boxes ----//
//++++ @end MIXINS ++++//


//+++++++++++//
/*@INTERFACES*/
//+++++++++++//
/**
  * This Interface creates default padding for cell-like structures (table cells, grid cells,
  * boxes, etc.).
  * The padding is based on the Vertical Rhythm Unit. The vertical padding is in rems, and
  * the horizontal padding is in pixels.
@tags
: #verticalrhythm
: #padding
@author
: Chris Harvey
@updated
: 2014-05-20
  */
.cellpaddingdefault {
	padding: (@vru_px  / 2) (@vru_px / 2 * @phi1); // fallback
	padding: (@vru_rem / 2) (@vru_px / 2 * @phi1);
}
/**
  * This Interface is used on containers of floats. It pushes subsequent content to the bottom
  * of the container.
@tags
: #float
@author
: Chris Harevy
@updated
: 2014-05-12
  */
.clearfix {
	&::after {
		display: table;
		content:' ';
		clear: both;
	}
}
/**
  * This Interface makes an object slightly transparent, but it becomes opaque upon `:hover`.
@tags
: #schematic
: #golden
@author
: Chris Harvey
@updated
: 2014-04-30
  */
.transp {
	opacity: @phi1;
	&:hover {opacity: 1;}
}
/**
  * This Interface puts an outline around an element to show its structure. It is used for
  * deomonstration purposes.
@tags
: #structural
@author
: Chris Harvey
@updated
: 2014-06-07
  */
.help-otln {
	outline: 1px solid @color_accent;
}

//-----------//
/*@Delimiters*/
//-----------//
/**
  * This Interface adds opening and closing punctuation marks surrounding an element. The
  * punctuation marks are given by the `quotes` property.
@tags
: #typography
: #quote
@author
: Chris Harvey
@updated
: 2014-05-26
  */
.delimiters {
	&::before {content: open-quote;}
	&::after  {content: close-quote;}
}
.parens        {&:extend(.delimiters all); quotes: '('     ')';}
.quotes-double {&:extend(.delimiters all); quotes: '\201c' '\201d';} // '“' '”'
.quotes-single {&:extend(.delimiters all); quotes: '\2018' '\2019';} // '‘' '’'
.guillemets    {&:extend(.delimiters all); quotes: '\00ab' '\00bb';} // '«' '»'
//---- @end Delimiters ----//
@media print {
	/**
	  * This Interface displays an Object on screen but does not print it.
	@tags
	: #schematic
	@author
	: Chris Harvey
	@updated
	: 2014-04-30
	  */
	.noprint {
		display: none;
	}
	/**
	  * This Interface starts a new page in the print media.
	@tags
	: #schematic
	@author
	: Chris Harvey
	@updated
	: 2014-04-30
	  */
	.pagebreak {
		page-break-before: always;
		padding-top: 0.25in;
	}
}

//++++ @end INTERFACES ++++//
