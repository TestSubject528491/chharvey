
/*--------------*\
    _vert.less
\*--------------*/

//Table of Contents
//- FONT SIZES
//- VERTICAL SPACING
//- VERTICAL BORDERS


//+++++++++++//
/*@FONT SIZES*/
//+++++++++++//
/** One vertical rhythm unit. This is the 'magic number'. */
@vru_px:  (@fontsize_base * @lineheight_base); // 16px * 1.5 = 24px
@vru_rem: (1rem           * @lineheight_base); // 1rem * 1.5 = 1.5rem

@fontsize_ratio_alpha:   (48/16); // 3.0000rem
@fontsize_ratio_beta:    (35/16); // 2.1875rem
@fontsize_ratio_gamma:   (26/16); // 1.6250rem
@fontsize_ratio_delta:   (21/16); // 1.3125rem
@fontsize_ratio_epsilon: (18/16); // 1.1250rem
@fontsize_ratio_zeta:    (16/16); // 1.0000rem

@fontsize_ratio_hexa:    (96/16); // 6.0000rem
@fontsize_ratio_tetra:   (64/16); // 4.0000rem
@fontsize_ratio_phi:     (@phi1); // 0.618033988749894848rem
@fontsize_ratio_hemi:    (08/16); // 0.5000rem

/**
  * These Mixins multiply `font-size` by `@ratio` and adjusts `line-height` such that
  * 	`font-size` * `line-height` = one vertical rhythm unit.
  * The `.fontsize-scale-double()` Mixin adjusts `line-height` such that `font-size` * `line-height` = two vertical rhythm units
@params
: @ratio : the ratio of the new font size to `fontsize_base`
@tags
: #verticalrhythm
: #fontsize
@author
: Chris Harvey
@updated
: 2014-04-26
  */
.fontsize-scale(@ratio) {
	font-size: (@fontsize_base * @ratio); // in px // fallback
	font-size: (1rem           * @ratio); // in rem
	line-height: (@lineheight_base / @ratio);
}
/**
  * Same as `.fontsize-scale()` Mixins except adjusts `line-height` such that
  * 	`font-size` * `line-height` = two vertical rhythm units.
@params
: @ratio : the ratio of the new font size to `fontsize_base`
@tags
: #verticalrhythm
: #fontsize
@author
: Chris Harvey
@updated
: 2014-05-03
  */
.fontsize-scale-double(@ratio) {
	.fontsize-scale(@ratio);
	line-height: (2 * (@lineheight_base / @ratio));
}
/**
  * This Interface sets a [large|medium|small] font size and corresponding line height.
@implements
: .fontsize-scale()
@tags
: #verticalrhythm
: #fontsize
@author
: Chris Harvey
@updated
: 2014-05-20
  */
.fontsize-lrg {.fontsize-scale(5/4);} // 1.25rem
.fontsize-med {.fontsize-scale(1/1);} // 1.00rem
.fontsize-sml {.fontsize-scale(3/4);} // 0.75rem
/**
  * This Interface sets an element to inline and does not affect vertical rhythm.
@tags
: #verticalrhythm
: #fontsize
@author
: Chris Harvey
@updated
: 2014-05-20
  */
.fontsize-inline {
	display: inline;
	line-height: @lineheight_base;
}
/**
  * This Interface sets [large|small] font size for inline elements. They do not affect vertical rhythm.
@implements
: .fontsize-[lrg|sml]
: .fontsize-inline
@tags
: #verticalrhythm
: #fontsize
@author
: Chris Harvey
@updated
: 2014-05-03
  */
.fontsize-lrg-inline,
.fontsize-sml-inline {
	&:extend(.fontsize-inline);
}
.fontsize-lrg-inline {
	&:extend(.fontsize-lrg);
}
.fontsize-sml-inline {
	&:extend(.fontsize-sml);
}
//++++ @end FONT SIZES ++++//


//+++++++++++++++++//
/*@VERTICAL SPACING*/
//+++++++++++++++++//
/**
  * This Interface provides a minimum height of one vertical rhythm unit.
  * It is Meant for text-containing block elements, such as p, blockquote, li, dt, dd, th, td.
  * If these elements have shorter contents, the vertical rhythm won't break.
@tags
: #verticalrhythm
@author
: Chris Harvey
@updated
: 2014-05-10
  */
.vru-content {
	min-height: @vru_px; // fallback
	min-height: @vru_rem;
}
/**
  * These Mixins provide [top|bottom] spacing of a multiple of a vertical rhythm unit.
@params
: @ratio : the multliplier, i.e. how many `rem`s
@tags
: #verticalrhythm
@author
: Chris Harvey
@updated
: 2014-05-10
  */
.vru-top(@ratio) {
	margin-top: (@ratio * @vru_px); // fallback
	margin-top: (@ratio * @vru_rem);
}
.vru-bottom(@ratio) {
	padding-bottom: (@ratio * @vru_px); // fallback
	padding-bottom: (@ratio * @vru_rem);
}
.vru-top-0    {margin-top: 0;}
.vru-bottom-0 {padding-bottom: 0;}
.vru-top-1    {.vru-top(1);}
.vru-bottom-1 {.vru-bottom(1);}
/**
  * This Mixin sets the padding-top, border-top, and margin-top such that the padding:margin ratio is Golden, while keeping the border-top-width. The sum of the padding, border, and margin is one vertical rhythm unit.
@params
: @brdrw : value of the border-top-width property. Must be less than `@vru_px`.
: @brdrs : value of the border-top-style property
: @brdrc : value of the border-top-color property
@tags
: #verticalrhythm
: #golden
@author
: Chris Harvey
@updated
: 2014-04-26
  */
.vru-top-phi(@brdrw; @brdrs; @brdrc) {
	padding-top: ((@vru_px - @brdrw) * @phi2);
	border-top: @brdrw @brdrs @brdrc;
	margin-top: ((@vru_px - @brdrw) * @phi1);
}
.vru-top-phi {.vru-top-phi(0; solid; #000);}
//++++ @end VERTICAL SPACING ++++//


//+++++++++++++++++//
/*@VERTICAL BORDERS*/
//+++++++++++++++++//
//
/**
  * The following Mixins adjust borders for **BLOCK** elements only! They will keep the vertical rhythm intact when adding borders (by slightly adjusting position and margins). *Do *not** use these mixins on INLINE elements!
  * Note: Methods with same # of params cannot be overloaded; thus mixin names have modifiers.
@params
: @width: the width of the top or bottom border
: @side:  either `top` or `bottom`
: @style: a `border-style` value
: @color: a `border-color` value
@tags
: #verticalrhythm
: #border
@author
: Chris Harvey
@updated
: 2014-04-26
  */
.border-vert(@width) {
	display: block;
	position: relative;
	top: (-1 * @width);
}
/** Adjust only the top or bottom border. */
.border-vert-one(@width) {
	.border-vert(@width);
	margin-bottom: (-1 * @width);
}
.border-vert-one(@side; @width) {
	.border-vert-one(@width);
	border-@{side}-width: @width;
}
.border-vert-one(@side; @width; @style) {
	.border-vert-one(@side; @width);
	border-@{side}-style: @style;
}
.border-vert-one(@side; @width; @style; @color) {
	.border-vert-one(@side; @width; @style);
	border-color: @color;
}
/** Adjust both the top and bottom borders. */
.border-vert-both(@width) {
	.border-vert(@width);
	margin-bottom: (-2 * @width);
}
.border-vert-both(topbot; @width) {
	.border-vert-both(@width);
	border-width: @width;
	border-left: 0;
	border-right: 0;
}
.border-vert-both(topbot; @width; @style) {
	.border-vert-both(topbot; @width);
	border-style: @style;
}
.border-vert-both(topbot; @width; @style; @color) {
	.border-vert-both(topbot; @width; @style);
	border-color: @color;
}
/** Adjust all four borders. */
.border-vert-both(all; @width) {
	.border-vert-both(@width);
	border-width: @width;
}
.border-vert-both(all; @width; @style) {
	.border-vert-both(all; @width);
	border-style: @style;
}
.border-vert-both(all; @width; @style; @color) {
	.border-vert-both(all; @width; @style);
	border-color: @color;
}
//++++ @end VERTICAL BORDERS ++++//
