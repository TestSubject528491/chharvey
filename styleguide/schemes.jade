doctype html
html(lang="en" xmlns="http://www.w3.org/1999/xhtml")
  head
    title Site Schemes &in; Site Design
    meta(charset="utf-8")
    meta(name="viewport" content="width=device-width, initial-scale=1")
    link(rel="stylesheet" href="../styles/chharvey.css")
    link(rel="stylesheet" href="styles/styleguide.css")
  body.o-GoldenContainer.-bc-w.-bi-n.-c-b
    main.o-GoldenContainer__Content
      h1 Site-Wide Schemes
      section#fonts
        h2 Typeface Scheme
        section.o-FlexContainer#ff-base
          h3.-w-1o1 Avenir Next
          p.c-FontDescr.
            Used for the main body copy, Avenir Next
            is a sans-serif type with little to no thick/thin transition.
            Being a sans-serif, its #[i italic] is actually an oblique, which just slants the glyphs.
            #[br]
            Similar: #[b Helvetica Neue]
            #[br]
            #[code .a-ff-base]
          figure.c-FontSamp.a-ff-base
            div.c-FontSamp__Letter Aa
            p.c-FontSamp__Sentence The quick brown fox jumps over the lazy dog.
          form.c-FontForm
            label
              input(type="checkbox" name="fs" value="italic")
              |  italic
            label
              input(type="checkbox" name="fv" value="small-caps")
              |  small-caps
            label
              input(type="range" name="fw" min="100" max="900" step="100" value="400")
              input(type="text" value="400 (normal)" disabled="" style="width:100px;")
            input(type="reset")
        section.o-FlexContainer#ff-heading
          h3.-w-1o1 Optima
          p.c-FontDescr.
            Optima is used only for headings of body copy
            (not table headings, #[i(lang="la"): abbr(title="et cetera") etc.]).
            It is a sans-serif polyweight type with a moderate thick/thin transition.
            Because of this, it goes well with both monoweight types and serif types, which
            makes it perfect for headings.
            #[br]
            Similar: #[b Seravek], #[b Tahoma].
            #[br]
            #[code .a-ff-heading]
          figure.c-FontSamp.a-ff-heading
            div.c-FontSamp__Letter Aa
            p.c-FontSamp__Sentence Oh, sphinx of black quartz, judge my vow.
          form.c-FontForm
            label
              input(type="checkbox" name="fs" value="italic")
              |  italic
            label
              input(type="checkbox" name="fv" value="small-caps")
              |  small-caps
            label
              input(type="range" name="fw" min="100" max="900" step="100" value="400")
              input(type="text" value="400 (normal)" disabled="" style="width:100px;")
            input(type="reset")
        section.o-FlexContainer#ff-prose
          h3.-w-1o1 Baskerville
          p.c-FontDescr.
            Baskerville is used for text in formal documents and articles.
            It is a serif oldstyle type, which is easy on the eyes and can be read at extensive length.
            Like the #[i heading] font family, it, too, has a moderate thick/thin transition, but has diagonal stress and
            serifs, and true italics, which means it uses a whole new set of glyphs.
            #[br]
            Similar: #[b Palatino], #[b Cochin]#[sup: a.Rf#rf-baskerville(rel="this" href="#fn-baskerville") 1]
            #[br]
            #[code .a-ff-prose]
          figure.c-FontSamp.a-ff-prose
            div.c-FontSamp__Letter Aa
            p.c-FontSamp__Sentence The five boxing wizards jump quickly.
          form.c-FontForm
            label
              input(type="checkbox" name="fs" value="italic")
              |  italic
            label
              input(type="checkbox" name="fv" value="small-caps")
              |  small-caps
            label
              input(type="range" name="fw" min="100" max="900" step="100" value="400")
              input(type="text" value="400 (normal)" disabled="" style="width:100px;")
            input(type="reset")
          footer.-w-1o1
            ul.c-ListFootnotes
              li.
                #[sup: a.Fn#fn-baskerville(rel="this" href="#rf-baskerville") 1]
                #[b Baskerville], though considered an #[b oldstyle] type, actually has
                a straight, vertical stress, which is typically a feature of #[b modern] types.
                However #[b Palatino] and #[b Cochin] indeed have diagonal stresses.
        section.o-FlexContainer#ff-accent
          h3.-w-1o1 Helvetica Neue
          p.c-FontDescr.
            Helvetica Neue is used for typographical and #[abbr(title="user interface") UI]
            components such as ledes, pull quotes, captions, alerts, labels, buttons, and keys.
            Like #[b Avenir], it is a monoweight sans-serif, yet slightly heavier.
            #[br]
            Similar: #[b Helvetica]
            #[br]
            #[code .a-ff-accent]
          figure.c-FontSamp.a-ff-accent
            div.c-FontSamp__Letter Aa
            p.c-FontSamp__Sentence Heavy boxes perform quick waltzes and jigs.
          form.c-FontForm
            label
              input(type="checkbox" name="fs" value="italic")
              |  italic
            label
              input(type="checkbox" name="fv" value="small-caps")
              |  small-caps
            label
              input(type="range" name="fw" min="100" max="900" step="100" value="400")
              input(type="text" value="400 (normal)" disabled="" style="width:100px;")
            input(type="reset")
        section.o-FlexContainer#ff-code
          h3.-w-1o1 Menlo
          p.c-FontDescr.
            Menlo is a monospace type used for sample code on the site. Personally, I dislike
            monospace fonts with serifs, so I chose a sans-serif.
            #[br]
            Similar: #[b Monaco], #[b Andale Mono]
            #[br]
            #[code .a-ff-code]
          figure.c-FontSamp.a-ff-code
            div.c-FontSamp__Letter Aa
            p.c-FontSamp__Sentence The quick brown fox jumps over the lazy dog.
          form.c-FontForm
            label
              input(type="checkbox" name="fs" value="italic")
              |  italic
            label
              input(type="checkbox" name="fv" value="small-caps")
              |  small-caps
            label
              input(type="range" name="fw" min="100" max="900" step="100" value="400")
              input(type="text" value="400 (normal)" disabled="" style="width:100px;")
            input(type="reset")
        section.o-FlexContainer#ff-math
          h3.-w-1o1 Didot
          p.c-FontDescr.
            Didot is a serif modern type use for mathematical spans and spans in foreign
            languages. It has a radical thick/thin transition, vertical stress, and
            straight horizontal serifs. With a cold yet elegant look, this font family makes
            long spans of text hard to read, but that&rsquo;s okay because this font is
            used only for short expressions.
            #[br]
            Similar: #[b Bodoni 72], #[b Times]
            #[br]
            #[code .a-ff-math]
          figure.c-FontSamp.a-ff-math
            div.c-FontSamp__Letter Aa
            p.c-FontSamp__Sentence Sixty zippers were quickly picked from the woven jute bag.
          form.c-FontForm
            label
              input(type="checkbox" name="fs" value="italic")
              |  italic
            label
              input(type="checkbox" name="fv" value="small-caps")
              |  small-caps
            label
              input(type="range" name="fw" min="100" max="900" step="100" value="400")
              input(type="text" value="400 (normal)" disabled="" style="width:100px;")
            input(type="reset")
        section.o-FlexContainer#ff-script
          h3.-w-1o1 Zapfino
          p.c-FontDescr.
            Zapfino is used for very fancy elements such as drop-caps and subheadings.
            Use this font family sparingly.
            #[br]
            #[code .a-ff-script]
          figure.c-FontSamp.a-ff-script
            div.c-FontSamp__Letter Aa
            p.c-FontSamp__Sentence The quick brown fox jumps over the lazy dog.
          form.c-FontForm
            label
              input(type="checkbox" name="fs" value="italic")
              |  italic
            label
              input(type="checkbox" name="fv" value="small-caps")
              |  small-caps
            label
              input(type="range" name="fw" min="100" max="900" step="100" value="400")
              input(type="text" value="400 (normal)" disabled="" style="width:100px;")
            input(type="reset")
      section
        h2 Font Sizes
        p.
          The first list shows atoms prefixed #[code fz-], which change only font size,
          mainly used for inline (text-level) elements. These atoms use #[b em] units,
          so the font sizes will scale according to their parents.
          The second lists atoms prefixed #[code fzb-], for font-size/line-height combos,
          which are useful for maintaining vertical rhythm on block elements.
          These use #[b rem] units, which are absolute.
          Only the first list is demonsrated (the second will look exactly
          the same save the line height).
        p.
          Notice there are two pairs of classes for each size.
          The first classname has an
          #[abbr(title="Système International d’Unités" lang="fr") SI]
          prefix that corresponds to a power of 1000,
          while the second classname uses a Greek/Latin prefix that indicates
          the value of #[code font-size] in its definition.
          The first set is good for comparing two different atoms, and
          the second set is good for when you need to know the absolute size.
        figure
          ul.o-ListBare.-sp-nw.-of-a
            li.a-fz-peta   .a-fz-peta  , .a-fz-hex     (6.00)
            li.a-fz-tera   .a-fz-tera  , .a-fz-tet     (4.00)
            li.a-fz-giga   .a-fz-giga  , .a-fz-tri     (3.00)
            li.a-fz-mega   .a-fz-mega  , .a-fz-di      (2.00)
            li.a-fz-kilo   .a-fz-kilo  , .a-fz-sesqui  (1.50)
            li.a-fz-normal .a-fz-normal                (1.00)
            li.a-fz-milli  .a-fz-milli , .a-fz-dodrans (0.75)
            li.a-fz-micro  .a-fz-micro , .a-fz-semi    (0.50)
        ul.-sp-nw
          li .a-fzb-peta  , .a-fzb-hex     (6.00/0.25)
          li .a-fzb-tera  , .a-fzb-tet     (4.00/0.375)
          li .a-fzb-giga  , .a-fzb-tri     (3.00/0.50)
          li .a-fzb-mega  , .a-fzb-di      (2.00/0.75)
          li .a-fzb-kilo  , .a-fzb-sesqui  (1.50/1.00)
          li .a-fzb-normal                 (1.00/1.50)
          li .a-fzb-milli , .a-fzb-dodrans (0.75/2.00)
          li .a-fzb-micro , .a-fzb-semi    (0.50/3.00)
      section
        h2 Headings and Paragraphs
        figure
          h1 Heading 1
          p(lang="la").
            Lorem ipsum dolor sit amet, consectetur adipiscing elit.
            Aliquam sagittis suscipit nunc, a cursus libero euismod at.
            Nulla placerat neque massa, quis interdum leo efficitur vel.
            Donec feugiat varius arcu non volutpat.
            Mauris eget mauris ut mauris auctor mattis id vel justo.
            Nulla dictum arcu nec suscipit mollis.
            Maecenas a iaculis nisl, ut pretium est. Nulla facilisi.
          h2 Heading 2
          p(lang="la").
            Suspendisse ut auctor enim.
            Aliquam viverra enim vitae ante aliquet venenatis.
            Sed vel nibh sit amet sapien fermentum mattis nec non arcu.
            Praesent dapibus velit quis lectus tempus, ut ullamcorper nibh facilisis.
            Aenean tincidunt ante risus, semper malesuada libero consectetur id.
            Praesent vel ligula ut enim porttitor porta. Aenean eu ullamcorper mi.
            Integer blandit est quam, eget mattis urna scelerisque quis.
            Maecenas sapien sapien, ornare nec lobortis eget, tincidunt sed ligula.
            Maecenas risus nibh, volutpat sed euismod non, semper eget neque.
            Integer varius egestas risus, volutpat sagittis turpis convallis eget.
            Vivamus pulvinar ligula eget mi tincidunt, eget faucibus justo laoreet.
            In sapien lacus, egestas faucibus laoreet eu, tempor sit amet lorem.
            Sed luctus congue tortor a scelerisque.
          h3 Heading 3
          p(lang="la").
            Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.
            Nunc sit amet scelerisque lectus. Cras cursus sed dui quis convallis.
            Quisque id justo elit.
            Fusce ut quam non sem efficitur accumsan sed id neque.
            Mauris finibus dignissim gravida.
            In dignissim mauris ac odio molestie volutpat.
            Nulla tellus justo, finibus sed volutpat sed, tristique ac lacus.
            Suspendisse sit amet fermentum sapien.
            Aliquam luctus laoreet iaculis.
            Proin lacinia orci vitae tellus pellentesque porttitor.
          h4 Heading 4
          p(lang="la").
            Aenean consectetur suscipit urna, non vehicula lacus blandit et.
            Integer at lacus et diam tristique suscipit.
            Ut cursus massa sit amet nisl convallis, elementum accumsan sapien mattis.
            Vestibulum vitae magna ac tellus accumsan pharetra vulputate vitae erat.
            Vestibulum est dui, elementum non sagittis ac, sagittis accumsan justo.
            Donec at vestibulum diam. Nam et volutpat dolor, at pulvinar nisi.
            Curabitur aliquam maximus nulla eu venenatis.
            Nam aliquam lorem non felis dignissim dictum.
            Pellentesque sagittis vehicula nisl non luctus.
            Pellentesque eget ligula hendrerit, blandit enim consequat, dictum sem.
            In quis lectus in lectus interdum laoreet eu quis quam.
            Fusce auctor posuere purus, quis semper libero dignissim euismod.
            Curabitur commodo mauris a sapien vulputate, eget pharetra urna facilisis.
          h5 Heading 5
          p(lang="la").
            Donec finibus ut lectus finibus pellentesque.
            Nulla euismod feugiat nulla nec posuere.
            Sed ac est id sem sagittis rhoncus eu ac neque.
            Aliquam eu metus sagittis, porta turpis id, scelerisque magna.
            Nulla venenatis elementum est, semper viverra felis tristique sit amet.
            Mauris nec ipsum id orci porttitor auctor sed sit amet sem.
            Lorem ipsum dolor sit amet, consectetur adipiscing elit.
            Etiam tellus leo, venenatis sit amet ipsum non, sagittis feugiat ante.
          h6 Heading 6
          p(lang="la").
            Donec vel dolor ut felis dapibus ultricies vitae a nibh.
            Ut semper odio est, sed lacinia ligula gravida ut.
            Vestibulum facilisis viverra pulvinar.
            Suspendisse maximus nisl sit amet augue vulputate, vel porta nunc molestie.
            Aliquam mauris diam, pharetra vel consectetur quis, rhoncus in risus.
            Donec ut quam massa.
            Vestibulum sapien justo, commodo a eros in, rhoncus interdum nisl.
            Etiam a porta lectus. Lorem ipsum dolor sit amet, consectetur adipiscing elit.
      section
        h2 Color Scheme
        footer.
          Based on the
          #[a(rel="external" href="http://www.thinkwithportals.com/"): cite Portal] video game series.
        -
          var scheme = {
            aperturewhite : {
              name        : 'Aperture White'
            , code_dfn    : 'hsv(217,   5%, 100%)'
            , code_hex    : '#f2f7ff'
            , bg_class    : 'a-bc-aperturewhite'
            , uses        : [ 'body background' ]
            }
          , apertureblack : {
              name        : 'Aperture Black'
            , code_dfn    : 'hsv( 37, 100%,   5%)'
            , code_hex    : '#0d0800'
            , bg_class    : 'a-bc-apertureblack'
            , is_dark     : true
            , uses        : [ 'body text' ]
            }
          , lakesuperior : {
              name        : 'Lake Superior'
            , code_dfn    : 'hsv(247, 100%,  60%)'
            , code_hex    : '#120099'
            , bg_class    : 'a-bc-lakesuperior'
            , is_dark     : true
            , uses        : [ 'major heading text' , 'ledes and drop caps' ]
            }
          , facilityabyss : {
              name        : 'Facility Abyss'
            , code_dfn    : 'hsv(187,  40%,  40%)'
            , code_hex    : '#3d6166'
            , bg_class    : 'a-bc-facilityabyss'
            , is_dark     : true
            , uses        : [ 'minor heading text' ]
            }
          , atlas : {
              name        : 'Atlas'
            , code_dfn    : 'hsv(217, 100%, 100%)'
            , code_hex    : '#0062ff'
            , bg_class    : 'a-bc-atlas'
            , is_dark     : true
            , uses        : [ 'link text' ]
            }
          , pbody : {
              name        : 'P-Body'
            , code_dfn    : 'hsv( 37, 100%, 100%)'
            , code_hex    : '#ff9d00'
            , bg_class    : 'a-bc-pbody'
            , uses        : [ 'hover link text' ]
            }
          , cavescaves : {
              name        : 'Cave’s Caves'
            , code_dfn    : 'hsv( 28,  66.6%,  50%)'
            , code_hex    : '#80522b'
            , bg_class    : 'a-bc-cavescaves'
            , is_dark     : true
            }
          , asbestos : {
              name        : 'Asbestos'
            , code_dfn    : 'hsv( 46, 100.0%,  75%)'
            , code_hex    : '#bf9300'
            , bg_class    : 'a-bc-asbestos'
            }
          , repulsion : {
              name        : 'Repulsion Gel'
            , code_dfn    : 'hsv(202,  80.0%, 100%)'
            , code_hex    : '#33b4ff'
            , bg_class    : 'a-bc-repulsion'
            , uses        : [ 'code/kbd/samp on print' ]
            }
          , propulsion : {
              name        : 'Propulsion Gel'
            , code_dfn    : 'hsv( 22,  80.0%, 100%)'
            , code_hex    : '#ff7e33'
            , bg_class    : 'a-bc-propulsion'
            , uses        : [ 'subheading text' ]
            }
          , deploying : {
              name        : 'Deploying'
            , code_dfn    : 'hsv(  7,  80%, 100%)'
            , code_hex    : '#ff4b33'
            , bg_class    : 'a-bc-deploying'
            , is_dark     : true
            , uses        : [ 'Danger components' ]
            }
          , hereye : {
              name        : 'HER Eye'
            , code_dfn    : 'hsv( 52,  80%, 100%)'
            , code_hex    : '#ffe433'
            , bg_class    : 'a-bc-hereye'
            , uses        : [ 'Caution components' ]
            }
          , neurotoxin : {
              name        : 'Neurotoxin'
            , code_dfn    : 'hsv( 97,  40%,  80%)'
            , code_hex    : '#9acc7a'
            , bg_class    : 'a-bc-neurotoxin'
            , uses        : [ 'Success components' ]
            }
          , bridges : {
              name        : 'Bridges of Light'
            , code_dfn    : 'hsv(202,  40%, 100%)'
            , code_hex    : '#99daff'
            , bg_class    : 'a-bc-bridges'
            , uses        : [ 'Info components' ]
            }
          , companion : {
              name        : 'Heart of a Companion'
            , code_dfn    : 'hsv(337,  40%, 100%)'
            , code_hex    : '#ff99c0'
            , bg_class    : 'a-bc-companion'
            , uses        : [ 'Help components' ]
            }
          , vilify : {
              name        : 'Vilify'
            , code_dfn    : 'hsv(277, 100%, 100%)'
            , code_hex    : '#9d00ff'
            , bg_class    : 'a-bc-vilify'
            , is_dark     : true
            , uses        : [ 'alert links' ]
            }
          , graylite : {
              name        : 'Aperture Gray Lite'
            , code_dfn    : 'mix(mix(@aperturewhite, @apertureblack, 80%), @pbody, 95%)'
            , code_hex    : '#c7c5c2'
            , bg_class    : 'a-bc-graylite'
            , uses        : [ 'light component default' ]
            }
          , graydark : {
              name        : 'Aperture Gray Dark'
            , code_dfn    : 'mix(mix(@apertureblack, @aperturewhite, 80%), @atlas, 95%)'
            , code_hex    : '#383a3d'
            , bg_class    : 'a-bc-graydark'
            , is_dark     : true
            , uses        : [ 'dark component default' ]
            }
          }
        mixin description(color)
          - var color_key = color.bg_class.slice(5)
          if (color_key === 'aperturewhite')
            p.
              The purity of Aperture Science in all its glory. This dazzling
              brilliance of bluish light seen on the portalable panels coated with
              Conversion Gel makes the background emit an eerie glow, like the full moon.
          else if (color_key === 'apertureblack')
            p.
              The polar opposite of Aperture White. Representing the true dark nature
              of the Enrichment Center, this is the color of the panels that inhibit
              portals. A hint of orange is infinitesimally noticeable. What better way to
              complement the background color than the color of normal text?
          else if (color_key === 'lakesuperior')
            p.
              This Great Lake borders #[a Ontonagon, MI], the location of the
              Aperture Science Enrichment Center. A perfect fit for superior headings on
              a page.
          else if (color_key === 'facilityabyss')
            p.
              This color can be seen in the endless depths of the subterranean
              testing facility. This color is for #[i minor] headings of a page.
          else if (color_key === 'atlas')
            p.
              Short and stout, Atlas is one of the two robots used for testing.
              Untouched hyperlinks are dedicated to his digital iris.
          else if (color_key === 'pbody')
            p.
              Tall and wiry, P-body is one of the two robots used for testing.
              Hovered hyperlinks are dedicated to his (or her?) digital iris.
          else if (color_key === 'cavescaves')
            p.
              Cave&rsquo;s underground salt mines were the ideal venue for early
              test chambers.
          else if (color_key === 'asbestos')
            p.
              The forgotten underground test chambers are ridden with this harmful
              substance. Or so Mr.&nbsp;Johnson says.
          else if (color_key === 'repulsion')
            p.
              Good news, you&rsquo;re not part of the control group; you get the gel.
              Bad news, it does #[em not] like the human skeleton. Turns out you might
              just break every bone in your legs anyway.
          else if (color_key === 'propulsion')
            p #[i Forwarding] the cause of science.
          else if (color_key === 'deploying')
            p.
              The one word you never want to hear without a portal gun. Just as the
              iris of a Sentry Turret, this color is briefly seen, providing a subtle accent
              on the site.
          else if (color_key === 'hereye')
            p.
              This color alone will scare the
              prokaryotic-microorganism-infested-fecal-matter out of you. See where you can
              find it. You monster.
          else if (color_key === 'neurotoxin')
            p.
              Long ago an #[i accident] resulted in the unleashing of
              this deadly vapor and the murdering of the entire human staff of
              Aperture Laboratories. Some say it could happen again, but this time on the
              test subjects&hellip;
          else if (color_key === 'bridges')
            p.
              Hard Light Bridges are literally massless, yet they can sustain
              infinite weight, as Chell can attest to.
          else if (color_key === 'companion')
            p.
              Believed to be sentient by some and alive by others, the
              Weighted Companion Cube has been said to provide advice and display emotions
              such as brevity, care, and love. It is even believed to hum opera when near
              a friend. A perfect color for helpful elements on a Web page.
          else if (color_key === 'vilify')
            p: q.-fs-t(cite="https://www.youtube.com/watch?v=G-Vg2YS-sFE").
              You&rsquo;ve
              got sucker&rsquo;s luck. Have you given up? Does it feel
              like a trial? Does it trouble your mind the way you trouble mine?
        mixin colorBox(color)
          section.o-Box.-w-1o2(class=[color.bg_class, (color.is_dark) ? 'h-darkbg' : ''])
            h4.ColorTitle= color.name
            p: code.ColorCode
              | .#{color.bg_class}
              br
              | #{color.code_dfn} == #{color.code_hex}
            +description(color)
            if (color.uses && color.uses[0])
              ul
                each el in color.uses
                  li= el
        -
          var trans = {
            shadelight : {
              name        : 'Shade Light'
            , code_dfn    : 'fadeout(@apertureblack, 80%)'
            , code_hexa   : 'rgba(#0d0800, 0.2)'
            , bg_class    : 'a-bc-shadelight'
            , box_color   : scheme.aperturewhite
            }
          , tintlight : {
              name        : 'Tint Light'
            , code_dfn    : 'fadeout(@aperturewhite, 80%)'
            , code_hexa   : 'rgba(#f2f7ff, 0.2)'
            , bg_class    : 'a-bc-tintlight'
            , box_color   : scheme.apertureblack
            , is_dark     : true
            }
          , shadeheavy : {
              name        : 'Shade Heavy'
            , code_dfn    : 'fadeout(@apertureblack, 20%)'
            , code_hexa   : 'rgba(#0d0800, 0.8)'
            , bg_class    : 'a-bc-shadeheavy'
            , box_color   : scheme.aperturewhite
            }
          , tintheavy : {
              name        : 'Tint Heavy'
            , code_dfn    : 'fadeout(@aperturewhite, 20%)'
            , code_hexa   : 'rgba(#f2f7ff, 0.8)'
            , bg_class    : 'a-bc-tintheavy'
            , box_color   : scheme.apertureblack
            , is_dark     : true
            }
          }
        mixin colorBoxTrans(color, n)
          section.o-Box.-w-1o2(class=[color.box_color.bg_class, (color.is_dark) ? 'h-darkbg' : ''])
            h4.ColorTitle Overlapping #{color.name}
            form
              label
                | background color:
                input.js-rowbc-swatch(type="color" value=color.box_color.code_hex)
              input.js-reset-swatch(type="reset")
            p
              | each:
              br
              code.ColorCode
                | .#{color.bg_class}
                br
                | #{color.code_dfn} == #{color.code_hexa}
            | Zero
            - var numbers = ['One','Two','Three','Four','Five','Six','Seven','Eight','Nine']
            mixin transbox(i)
              if i < n
                div.o-Box(class=color.bg_class)= numbers[i]
                  +transbox(i+1)
            +transbox(0)
        section.o-FlexContainer
          h3.-w-1o1 Main Portal Colors
          +colorBox(scheme.aperturewhite)
          +colorBox(scheme.apertureblack)
          +colorBox(scheme.lakesuperior)
          +colorBox(scheme.facilityabyss)
          +colorBox(scheme.atlas)
          +colorBox(scheme.pbody)
        section.o-FlexContainer
          h3.-w-1o1 More Portal Colors
          +colorBox(scheme.cavescaves)
          +colorBox(scheme.asbestos)
          +colorBox(scheme.repulsion)
          +colorBox(scheme.propulsion)
        section.o-FlexContainer
          h3.-w-1o1 UI Component Colors
          +colorBox(scheme.deploying)
          +colorBox(scheme.hereye)
          +colorBox(scheme.neurotoxin)
          +colorBox(scheme.bridges)
          +colorBox(scheme.companion)
          +colorBox(scheme.vilify)
        section.o-FlexContainer
          h3.-w-1o1 Grays and Shadows
          +colorBox(scheme.graylite)
          +colorBox(scheme.graydark)
          +colorBoxTrans(trans.shadelight, 7)
          +colorBoxTrans(trans.tintlight,  7)
          +colorBoxTrans(trans.shadeheavy, 4)
          +colorBoxTrans(trans.tintheavy,  4)
        aside.o-Box.o-Box--dialog(style="margin-bottom: 1.5rem; border: 1px solid #9acc7a; background: rgba(0, 0, 0, 0.05); box-shadow: inset 0 0 0.5rem 0rem rgba(0,0,0,0.2);")
          h3.-ta-c Overlapping Opacity
          p.c-Subhead Calculating the Perceived Alpha Value
          p.
            The common intuition that overlapping alphas are simply added
            is incorrect. For example, a block with an opacity of 0.4 in front of another block
            with an opacity of 0.6 does not result in a total opacity of 1.0. It actually results
            in an opacity of 0.76. The fact of the matter is that no matter how many translucent
            blocks overlap (as long as their alphas are less than 1), you will never get something
            completely opaque. (You may get very close, like 0.99991, but not exactly 1.0.)
            This implies that the model for overlapping opacities is some sort of
            exponential decay#[sup: a.Rf#rf-decay(href="#fn-decay") 1]
            that increasingly and asymptotically approaches 1.0.
          p.
            To cut to the chase, the formula used to calculate the final resulting alpha,
            call it #[span.js-mt \alpha], from a given number of alphas,
            #[span.js-mt \alpha_1, \alpha_2, \dots, \alpha_n], is
          p.js-mb \alpha = 1 - \bigl[\left(1-\alpha_1\right)\left(1-\alpha_2\right)\cdots\left(1-\alpha_n\right)\bigr]
          p Therefore the true resulting opacity from two overlapping blocks with opacity 0.4 and 0.6 is
          p.js-mb(style="min-height:7.5rem;").
            \begin{align}
              \alpha
              &= 1 - \left(1-0.6\right)\left(1-0.4\right) \\
              &= 1-\left(0.4\right)\left(0.6\right) \\
              &= 1-0.24 \\
              &= 0.76
            \end{align}
          p.
            If all of the alphas are a constant #[span.js-mt \alpha_1], however, we may convert
            this formula into a function of one variable: the number of overlapping blocks.
            This results in our desired increasing exponential decay function. Indeed,
            its right-hand limit is 1.
          p.js-mb \alpha(n;\alpha_1) = 1 - \left(1-\alpha_1\right)^n
          footer: ul.c-ListFootnotes
              li.
                #[sup: a.Fn#fn-decay(href="#rf-decay") 1]
                I call it exponential #[em decay] because the base of the exponent is less than 1.
                This is true even if the function itself is increasing.
                It would only be called exponential #[em growth] if the base were more than 1,
                again, whether the function were increasing or decreasing.
    nav.Bc
      ol.Anc
        li: a.Crumb(rel="top   " href="../index.html   ") Home
        li: a.Crumb(rel="parent" href="../home/web.html") Web
      ul.Sib
        li: a.Crumb(rel="sibling" href="base.html     ") Base Typography
        li: a.Crumb(rel="sibling" href="objects.html  ") Objects
        li: a.Crumb(rel="sibling" href="comp-typo.html") Typo Components
        li: a.Crumb(rel="sibling" href="comp-ui.html  ") UI Components
        li: a.Crumb(rel="this   " href="schemes.html  ") Site Schemes
      ul.Child
    script(src="../bower_components/jquery/dist/jquery.js")
    script(src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML,https://chharvey.github.io/chhlib/mathjax-localconfig.js")
    script(src="../core/scripts/global.js")
    script(src="../core/scripts/util.js")
    script(src="../core/scripts/color.js")
    script.
      $('.js-rowbc-swatch').change(function () {
        var orig = $(this).attr('value')
          , value = $(this).val() || orig
        function swatchChange(self, newvalue) {
          $(self).parents('.o-Box').each(function () {
            $(this).attr('style', 'background-color: ' + newvalue + ' !important')
          })
        }
        swatchChange($(this), value)
        $(this).siblings('.js-reset-swatch').click(function () {
          swatchChange($(this), orig)
        })
      })
      function fontdemo(self) {
        return $(self).closest('.o-FlexContainer').find('.c-FontSamp')
      }
      $('input[name="fs"]').change(function () {
        fontdemo(this).css('font-style', (this.checked) ? $(this).val() : '')
      })
      $('input[name="fv"]').change(function () {
        fontdemo(this).css('font-variant', (this.checked) ? $(this).val() : '')
      })
      $('input[name="fw"]').on('input change', function () {
        var val = $(this).val() // a string
        fontdemo(this).css('font-weight', val)
        var norm = (+val == 400) ? ' (normal)' : ''
        var bold = (+val == 700) ? ' (bold)' : ''
        $(this).siblings('input[type="text"]').val(val + norm + bold)
      })
      $('.c-FontForm input[type="reset"]').click(function () {
        fontdemo(this).css('font-style', '').css('font-variant','').css('font-weight', '')
      })
      //- $('#ff-script .c-FontSamp, #ff-script .c-FontSamp *').each(function () {
      //-   var old_lh = parseInt($(this).css('line-height')) / parseInt($(this).css('font-size'))
      //-   $(this).css('line-height', 2 * old_lh)
      //- })
