extends layout.tpl.jade

block append vars
  - titles.push('Site-Wide Schemes')

block append main
  include ../core/include/_snippets.jade
  section#typeface-scheme
    -
      var font_scheme = {
        base : {
          name : 'Avenir Next'
        , class : 'a-ff-base'
        , sample: 'The quick brown fox jumps over the lazy dog.'
        , similar: [ 'Helvetica Neue' ]
        }
      , heading : {
          name : 'Optima'
        , class : 'a-ff-heading'
        , sample: 'Oh, sphinx of black quartz, judge my vow.'
        , similar: [ 'Seravek' , 'Tahoma' ]
        }
      , prose : {
          name : 'Baskerville'
        , class : 'a-ff-prose'
        , sample: 'The five boxing wizards jump quickly.'
        , similar: [ 'Palatino' , 'Cochin' ]
        }
      , accent : {
          name : 'Helvetica Neue'
        , class : 'a-ff-accent'
        , sample: 'Heavy boxes perform quick waltzes and jigs.'
        , similar: [ 'Helvetica' ]
        }
      , code : {
          name : 'Menlo'
        , class : 'a-ff-code'
        , sample: 'The quick brown fox jumps over the lazy dog.'
        , similar: [ 'Monaco' , 'Andale Mono' ]
        }
      , math : {
          name : 'Didot'
        , class : 'a-ff-math'
        , sample: 'Sixty zippers were quickly picked from the woven jute bag.'
        , similar: [ 'Bodoni 72' , 'Times' ]
        }
      , script : {
          name : 'Zapfino'
        , class : 'a-ff-script'
        , sample: 'The quick brown fox jumps over the lazy dog.'
        }
      }
    mixin fontBox(typeface, footer)
      section.o-GridFlex
        mixin description()
          p Sample description.
        mixin footer()
          footer Sample footer.
        block
        h3.-w-1o1= typeface.name
        div.a-w-p1
          p
            code .#{typeface.class}
            if (typeface.similar && typeface.similar[0])
              br
              | Similar: 
              b= typeface.similar
          +description()
        div.a-w-p2
          figure.c-FontSamp(class=typeface.class)
            div.c-FontSamp__Letter Aa
            p.c-FontSamp__Sentence= typeface.sample
          form.c-FontForm
            label.-d-bk
              input(type="checkbox" name="fs" value="italic")
              |  italic
            label.-d-bk
              input(type="checkbox" name="fv" value="small-caps")
              |  small-caps
            label.-d-bk
              input(type="range" name="fw" min="100" max="900" step="100" value="400")
              input(type="text" value="400 (normal)" disabled="")
            input.-d-bk(type="reset")
        if footer
          +footer()
    h2 Typeface Scheme
    +fontBox(font_scheme.base)
      mixin description()
        p.
          Used for the main body copy, Avenir Next
          is a sans-serif type with little to no thick/thin transition.
          Being a sans-serif, its #[i italic] is actually an oblique, which just slants the glyphs.
    +fontBox(font_scheme.heading)
      mixin description()
        p.
          Optima is used only for headings of body copy
          (not table headings, #[+etc()]).
          It is a sans-serif polyweight type with a moderate thick/thin transition.
          Because of this, it goes well with both monoweight types and serif types, which
          makes it perfect for headings.
    +fontBox(font_scheme.prose, true)
      mixin description()
        p.
          Baskerville is used for text in formal documents and articles.
          It is a serif oldstyle type, which is easy on the eyes and can be read at extensive length.
          Like the #[i heading] font family, it, too, has a moderate thick/thin transition, but has diagonal stress and
          serifs, and true italics, which means it uses a whole new set of glyphs.
          #[sup: a.Rf#rf-baskerville(rel="this" href="#fn-baskerville") 1]
      mixin footer()
        footer.-w-1o1
          ul.c-ListFootnotes
            li.
              #[sup: a.Fn#fn-baskerville(rel="this" href="#rf-baskerville") 1]
              #[b Baskerville], though considered an #[b oldstyle] type, actually has
              a straight, vertical stress, which is typically a feature of #[b modern] types.
              However #[b Palatino] and #[b Cochin] indeed have diagonal stresses.
    +fontBox(font_scheme.accent)
      mixin description()
        p.
          Helvetica Neue is used for typographical and #[abbr(title="user interface") UI]
          components such as ledes, pull quotes, captions, alerts, labels, buttons, and keys.
          Like #[b Avenir], it is a monoweight sans-serif, yet slightly heavier.
    +fontBox(font_scheme.code)
      mixin description()
        p.
          Menlo is a monospace type used for sample code on the site. Personally, I dislike
          monospace fonts with serifs, so I chose a sans-serif.
    +fontBox(font_scheme.math)
      mixin description()
        p.
          Didot is a serif modern type use for mathematical spans and spans in foreign
          languages. It has a radical thick/thin transition, vertical stress, and
          straight horizontal serifs. With a cold yet elegant look, this font family makes
          long spans of text hard to read, but that&rsquo;s okay because this font is
          used only for short expressions.
    +fontBox(font_scheme.script)
      mixin description()
        p.
          Zapfino is used for very fancy elements such as drop-caps and subheadings.
          Use this font family sparingly.
  section#font-sizes
    h2 Font Sizes
    p.
      The first list shows atoms prefixed #[code fz-], which change only font size,
      mainly used for inline (text-level) elements. These atoms use #[b em] units,
      so the font sizes will scale according to their parents.
      The second lists atoms prefixed #[code fzb-], for font-size/line-height combos,
      which are useful for maintaining vertical rhythm on block elements.
      These use #[b rem] units, which are absolute.
      Only the first list is demonsrated (the second will look exactly
      the same save the line height).
    p.
      Notice there are two pairs of classes for each size.
      The first classname has an
      #[abbr(title="Système International d’Unités" lang="fr") SI]
      prefix that corresponds to a power of 1000,
      while the second classname uses a Greek/Latin prefix that indicates
      the value of #[code font-size] in its definition.
      The first set is good for comparing two different atoms, and
      the second set is good for when you need to know the absolute size.
    figure
      ul.o-ListBare.-sp-nw.-of-a
        li.a-fz-peta .a-fz-peta, .a-fz-hex     (6.00)
        li.a-fz-tera .a-fz-tera, .a-fz-tet     (4.00)
        li.a-fz-giga .a-fz-giga, .a-fz-tri     (3.00)
        li.a-fz-mega .a-fz-mega, .a-fz-di      (2.00)
        li.a-fz-kilo .a-fz-kilo, .a-fz-sesqui  (1.50)
        li.a-fz-norm .a-fz-norm                (1.00)
        li.a-fz-mill .a-fz-mill, .a-fz-dodrans (0.75)
        li.a-fz-micr .a-fz-micr, .a-fz-semi    (0.50)
    ul
      li .a-fzb-peta, .a-fzb-hex     (6.00/0.25)
      li .a-fzb-tera, .a-fzb-tet     (4.00/0.375)
      li .a-fzb-giga, .a-fzb-tri     (3.00/0.50)
      li .a-fzb-mega, .a-fzb-di      (2.00/0.75)
      li .a-fzb-kilo, .a-fzb-sesqui  (1.50/1.00)
      li .a-fzb-norm                 (1.00/1.50)
      li .a-fzb-mill, .a-fzb-dodrans (0.75/2.00)
      li .a-fzb-micr, .a-fzb-semi    (0.50/3.00)
  section#color-scheme
    -
      var color_scheme = {
        aperturewhite : {
          name        : 'Aperture White'
        , code_dfn    : 'hsv(217,   5%, 100%)'
        , code_hex    : '#f2f7ff'
        , bg_class    : 'a-bc-aperturewhite'
        , uses        : [ 'body background' ]
        }
      , apertureblack : {
          name        : 'Aperture Black'
        , code_dfn    : 'hsv( 37, 100%,   5%)'
        , code_hex    : '#0d0800'
        , bg_class    : 'a-bc-apertureblack'
        , is_dark     : true
        , uses        : [ 'body text' ]
        }
      , lakesuperior : {
          name        : 'Lake Superior'
        , code_dfn    : 'hsv(247, 100%,  60%)'
        , code_hex    : '#120099'
        , bg_class    : 'a-bc-lakesuperior'
        , is_dark     : true
        , uses        : [ 'major heading text' , 'ledes and drop caps' ]
        }
      , facilityabyss : {
          name        : 'Facility Abyss'
        , code_dfn    : 'hsv(187,  40%,  40%)'
        , code_hex    : '#3d6166'
        , bg_class    : 'a-bc-facilityabyss'
        , is_dark     : true
        , uses        : [ 'minor heading text' ]
        }
      , atlas : {
          name        : 'Atlas'
        , code_dfn    : 'hsv(217, 100%, 100%)'
        , code_hex    : '#0062ff'
        , bg_class    : 'a-bc-atlas'
        , is_dark     : true
        , uses        : [ 'link text' ]
        }
      , pbody : {
          name        : 'P-Body'
        , code_dfn    : 'hsv( 37, 100%, 100%)'
        , code_hex    : '#ff9d00'
        , bg_class    : 'a-bc-pbody'
        , uses        : [ 'hover link text' ]
        }
      , cavescaves : {
          name        : 'Cave’s Caves'
        , code_dfn    : 'hsv( 28,  66.6%,  50%)'
        , code_hex    : '#80522b'
        , bg_class    : 'a-bc-cavescaves'
        , is_dark     : true
        }
      , asbestos : {
          name        : 'Asbestos'
        , code_dfn    : 'hsv( 46, 100.0%,  75%)'
        , code_hex    : '#bf9300'
        , bg_class    : 'a-bc-asbestos'
        }
      , repulsion : {
          name        : 'Repulsion Gel'
        , code_dfn    : 'hsv(202,  80.0%, 100%)'
        , code_hex    : '#33b4ff'
        , bg_class    : 'a-bc-repulsion'
        , uses        : [ 'code/kbd/samp on print' ]
        }
      , propulsion : {
          name        : 'Propulsion Gel'
        , code_dfn    : 'hsv( 22,  80.0%, 100%)'
        , code_hex    : '#ff7e33'
        , bg_class    : 'a-bc-propulsion'
        , uses        : [ 'subheading text' ]
        }
      , deploying : {
          name        : 'Deploying'
        , code_dfn    : 'hsv(  7,  80%, 100%)'
        , code_hex    : '#ff4b33'
        , bg_class    : 'a-bc-deploying'
        , is_dark     : true
        , uses        : [ 'Danger components' ]
        }
      , hereye : {
          name        : 'HER Eye'
        , code_dfn    : 'hsv( 52,  80%, 100%)'
        , code_hex    : '#ffe433'
        , bg_class    : 'a-bc-hereye'
        , uses        : [ 'Caution components' ]
        }
      , neurotoxin : {
          name        : 'Neurotoxin'
        , code_dfn    : 'hsv( 97,  40%,  80%)'
        , code_hex    : '#9acc7a'
        , bg_class    : 'a-bc-neurotoxin'
        , uses        : [ 'Success components' ]
        }
      , bridges : {
          name        : 'Bridges of Light'
        , code_dfn    : 'hsv(202,  40%, 100%)'
        , code_hex    : '#99daff'
        , bg_class    : 'a-bc-bridges'
        , uses        : [ 'Info components' ]
        }
      , companion : {
          name        : 'Heart of a Companion'
        , code_dfn    : 'hsv(337,  40%, 100%)'
        , code_hex    : '#ff99c0'
        , bg_class    : 'a-bc-companion'
        , uses        : [ 'Help components' ]
        }
      , vilify : {
          name        : 'Vilify'
        , code_dfn    : 'hsv(277, 100%, 100%)'
        , code_hex    : '#9d00ff'
        , bg_class    : 'a-bc-vilify'
        , is_dark     : true
        , uses        : [ 'alert links' ]
        }
      , graylite : {
          name        : 'Aperture Gray Lite'
        , code_dfn    : 'mix(mix(@aperturewhite, @apertureblack, 80%), @pbody, 95%)'
        , code_hex    : '#c7c5c2'
        , bg_class    : 'a-bc-graylite'
        , uses        : [ 'light component default' ]
        }
      , graydark : {
          name        : 'Aperture Gray Dark'
        , code_dfn    : 'mix(mix(@apertureblack, @aperturewhite, 80%), @atlas, 95%)'
        , code_hex    : '#383a3d'
        , bg_class    : 'a-bc-graydark'
        , is_dark     : true
        , uses        : [ 'dark component default' ]
        }
      }
      var trans = {
        shadelight : {
          name        : 'Shade Light'
        , code_dfn    : 'fadeout(@apertureblack, 80%)'
        , code_hexa   : 'rgba(#0d0800, 0.2)'
        , bg_class    : 'a-bc-shadelight'
        , box_color   : color_scheme.aperturewhite
        }
      , tintlight : {
          name        : 'Tint Light'
        , code_dfn    : 'fadeout(@aperturewhite, 80%)'
        , code_hexa   : 'rgba(#f2f7ff, 0.2)'
        , bg_class    : 'a-bc-tintlight'
        , box_color   : color_scheme.apertureblack
        , is_dark     : true
        }
      , shadeheavy : {
          name        : 'Shade Heavy'
        , code_dfn    : 'fadeout(@apertureblack, 20%)'
        , code_hexa   : 'rgba(#0d0800, 0.8)'
        , bg_class    : 'a-bc-shadeheavy'
        , box_color   : color_scheme.aperturewhite
        }
      , tintheavy : {
          name        : 'Tint Heavy'
        , code_dfn    : 'fadeout(@aperturewhite, 20%)'
        , code_hexa   : 'rgba(#f2f7ff, 0.8)'
        , bg_class    : 'a-bc-tintheavy'
        , box_color   : color_scheme.apertureblack
        , is_dark     : true
        }
      }
    mixin colorBox(color)
      section.o-GridFlex__Item.o-Box.-w-1o2(class=[color.bg_class, (color.is_dark) ? 'h-darkbg' : ''] style="border-radius:0;")
        mixin description()
          p Sample description.
        block
        h4.ColorTitle= color.name
        p: code.ColorCode
          | .#{color.bg_class}
          br
          | #{color.code_dfn} == #{color.code_hex}
        +description()
        if (color.uses && color.uses[0])
          ul
            each el in color.uses
              li= el
    mixin colorBoxTrans(color, n)
      section.o-GridFlex__Item.o-Box.-w-1o2(class=[color.box_color.bg_class, (color.is_dark) ? 'h-darkbg' : ''] style="border-radius:0;")
        - var numbers = ['One','Two','Three','Four','Five','Six','Seven','Eight','Nine']
        mixin transbox(i)
          if i < n
            div.o-Box(class=color.bg_class)= numbers[i]
              +transbox(i+1)
        h4.ColorTitle Overlapping #{color.name}
        form
          label
            | background color:
            input.js-rowbc-swatch(type="color" value=color.box_color.code_hex)
          input.js-reset-swatch(type="reset")
        p
          | each:
          br
          code.ColorCode
            | .#{color.bg_class}
            br
            | #{color.code_dfn} == #{color.code_hexa}
        | Zero
        +transbox(0)
    h2 Color Scheme
    footer: p.
      Based on the
      #[a(rel="external" href="http://www.thinkwithportals.com/"): cite Portal] video game series.
    section.o-GridFlex
      h3.o-GridFlex__Item Main Portal Colors
      +colorBox(color_scheme.aperturewhite)
        mixin description()
          p.
            The purity of Aperture Science in all its glory. This dazzling
            brilliance of bluish light seen on the portalable panels coated with
            Conversion Gel makes the background emit an eerie glow, like the full moon.
      +colorBox(color_scheme.apertureblack)
        mixin description()
          p.
            The polar opposite of Aperture White. Representing the true dark nature
            of the Enrichment Center, this is the color of the panels that inhibit
            portals. A hint of orange is infinitesimally noticeable. What better way to
            complement the background color than the color of normal text?
      +colorBox(color_scheme.lakesuperior)
        mixin description()
          p.
            This Great Lake borders #[a Ontonagon, MI], the location of the
            Aperture Science Enrichment Center. A perfect fit for superior headings on
            a page.
      +colorBox(color_scheme.facilityabyss)
        mixin description()
          p.
            This color can be seen in the endless depths of the subterranean
            testing facility. This color is for #[i minor] headings of a page.
      +colorBox(color_scheme.atlas)
        mixin description()
          p.
            Short and stout, Atlas is one of the two robots used for testing.
            Untouched hyperlinks are dedicated to his digital iris.
      +colorBox(color_scheme.pbody)
        mixin description()
          p.
            Tall and wiry, P-body is one of the two robots used for testing.
            Hovered hyperlinks are dedicated to his (or her?) digital iris.
    section.o-GridFlex
      h3.o-GridFlex__Item More Portal Colors
      +colorBox(color_scheme.cavescaves)
        mixin description()
          p.
            Cave&rsquo;s underground salt mines were the ideal venue for early
            test chambers.
      +colorBox(color_scheme.asbestos)
        mixin description()
          p.
            The forgotten underground test chambers are ridden with this harmful
            substance. Or so Mr.&nbsp;Johnson says.
      +colorBox(color_scheme.repulsion)
        mixin description()
          p.
            Good news, you&rsquo;re not part of the control group; you get the gel.
            Bad news, it does #[em not] like the human skeleton. Turns out you might
            just break every bone in your legs anyway.
      +colorBox(color_scheme.propulsion)
        mixin description()
          p #[i Forwarding] the cause of science.
    section.o-GridFlex
      h3.o-GridFlex__Item UI Component Colors
      +colorBox(color_scheme.deploying)
        mixin description()
          p.
            The one word you never want to hear without a portal gun. Just as the
            iris of a Sentry Turret, this color is briefly seen, providing a subtle accent
            on the site.
      +colorBox(color_scheme.hereye)
        mixin description()
          p.
            This color alone will scare the
            prokaryotic-microorganism-infested-fecal-matter out of you. See where you can
            find it. You monster.
      +colorBox(color_scheme.neurotoxin)
        mixin description()
          p.
            Long ago an #[i accident] resulted in the unleashing of
            this deadly vapor and the murdering of the entire human staff of
            Aperture Laboratories. Some say it could happen again, but this time on the
            test subjects&hellip;
      +colorBox(color_scheme.bridges)
        mixin description()
          p.
            Hard Light Bridges are literally massless, yet they can sustain
            infinite weight, as Chell can attest to.
      +colorBox(color_scheme.companion)
        mixin description()
          p.
            Believed to be sentient by some and alive by others, the
            Weighted Companion Cube has been said to provide advice and display emotions
            such as brevity, care, and love. It is even believed to hum opera when near
            a friend. A perfect color for helpful elements on a Web page.
      +colorBox(color_scheme.vilify)
        mixin description()
          p: q.-fs-t(cite="https://www.youtube.com/watch?v=G-Vg2YS-sFE").
            You&rsquo;ve
            got sucker&rsquo;s luck. Have you given up? Does it feel
            like a trial? Does it trouble your mind the way you trouble mine?
    section.o-GridFlex
      h3.o-GridFlex__Item Grays and Shadows
      +colorBox(color_scheme.graylite)
      +colorBox(color_scheme.graydark)
      +colorBoxTrans(trans.shadelight, 7)
      +colorBoxTrans(trans.tintlight,  7)
      +colorBoxTrans(trans.shadeheavy, 4)
      +colorBoxTrans(trans.tintheavy,  4)
    aside.o-Box(style={
      'margin-bottom': '1.5rem'
    , 'border': '1px solid #9acc7a'
    , 'margin-top': '-2px'
    , 'border-radius': '1rem'
    , 'background': 'rgba(0, 0, 0, 0.05)'
    , 'box-shadow': 'inset 0 0 0.5rem 0rem rgba(0,0,0,0.2)'
    })
      h3.-ta-c Overlapping Opacity
      p.c-Subhead Calculating the Perceived Alpha Value
      p.
        The common intuition that overlapping alphas are simply added
        is incorrect. For example, a block with an opacity of 0.4 in front of another block
        with an opacity of 0.6 does not result in a total opacity of 1.0. It actually results
        in an opacity of 0.76. The fact of the matter is that no matter how many translucent
        blocks overlap (as long as their alphas are less than 1), you will never get something
        completely opaque. (You may get very close, like 0.99991, but not exactly 1.0.)
        This implies that the model for overlapping opacities is some sort of
        exponential decay#[sup: a.Rf#rf-decay(href="#fn-decay") 1]
        that increasingly and asymptotically approaches 1.0.
      p.
        To cut to the chase, the formula used to calculate the final resulting alpha,
        call it #[span.js-mt \alpha], from a given number of alphas,
        #[span.js-mt \alpha_1, \alpha_2, \dots, \alpha_n], is
      p.js-mb \alpha = 1 - \bigl[\left(1-\alpha_1\right)\left(1-\alpha_2\right)\cdots\left(1-\alpha_n\right)\bigr]
      p Therefore the true resulting opacity from two overlapping blocks with opacity 0.4 and 0.6 is
      p.js-mb(style="min-height:7.5rem;").
        \begin{align}
          \alpha
          &= 1 - \left(1-0.6\right)\left(1-0.4\right) \\
          &= 1-\left(0.4\right)\left(0.6\right) \\
          &= 1-0.24 \\
          &= 0.76
        \end{align}
      p.
        If all of the alphas are a constant #[span.js-mt \alpha_1], however, we may convert
        this formula into a function of one variable: the number of overlapping blocks.
        This results in our desired increasing exponential decay function. Indeed,
        its right-hand limit is 1.
      p.js-mb \alpha(n;\alpha_1) = 1 - \left(1-\alpha_1\right)^n
      footer: ul.c-ListFootnotes
        li.
          #[sup: a.Fn#fn-decay(href="#rf-decay") 1]
          I call it exponential #[em decay] because the base of the exponent is less than 1.
          This is true even if the function itself is increasing.
          It would only be called exponential #[em growth] if the base were more than 1,
          again, whether the function were increasing or decreasing.
block append body
  script(src="../core/scripts/util.js")
  script(src="../core/scripts/color.js")
  script.
    $('body').addClass('-bc-w -bi-n -c-b')
    $('input[name="fs"]').change(function () {
      fontdemo(this).css('font-style', (this.checked) ? $(this).val() : '')
    })
    $('input[name="fv"]').change(function () {
      fontdemo(this).css('font-variant', (this.checked) ? $(this).val() : '')
    })
    $('input[name="fw"]').on('input change', function () {
      var val = $(this).val() // a string
      fontdemo(this).css('font-weight', val)
      var norm = (+val == 400) ? ' (normal)' : ''
      var bold = (+val == 700) ? ' (bold)' : ''
      $(this).siblings('input[type="text"]').val(val + norm + bold)
    })
    $('.c-FontForm input[type="reset"]').click(function () {
      fontdemo(this).css('font-style', '').css('font-variant','').css('font-weight', '')
    })
    $('.js-rowbc-swatch').change(function () {
      var orig = $(this).attr('value')
        , value = $(this).val() || orig
      function swatchChange(self, newvalue) {
        $(self).parents('.o-Box').each(function () {
          $(this).attr('style', 'background-color: ' + newvalue + ' !important')
        })
      }
      swatchChange($(this), value)
      $(this).siblings('.js-reset-swatch').click(function () {
        swatchChange($(this), orig)
      })
    })
    function fontdemo(self) {
      return $(self).closest('.o-GridFlex').find('.c-FontSamp')
    }
